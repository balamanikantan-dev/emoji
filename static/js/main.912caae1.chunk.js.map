{"version":3,"sources":["Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","query","setQuery","emojis","useMemo","Data","console","time","results","filter","emoji","keywords","search","title","timeEnd","style","textAlign","htmlFor","className","onChange","event","log","target","value","type","id","name","placeholder","map","xs","sm","md","lg","xl","onClick","text","symbol","navigator","clipboard","writeText","then","notification","open","message","err","error","bordered","width","fontSize","marginLeft","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"susKA2DeA,EAtDF,WAAM,MAEWC,mBAAS,IAFpB,mBAERC,EAFQ,KAEDC,EAFC,KAITC,EAASC,mBAAQ,WACnB,GAAc,KAAVH,EACA,OAAQI,EAGRC,QAAQC,KAAK,KACb,IAAMC,EAAUH,EAAKI,QAAO,SAAAC,GACxB,OAAyC,IAAlCA,EAAMC,SAASC,OAAOX,KAAgD,IAA/BS,EAAMG,MAAMD,OAAOX,MAGrE,OADAK,QAAQQ,QAAQ,KACRN,IAEb,CAACP,IAgBJ,OACI,gCACI,oBAAIc,MAAO,CAAEC,UAAW,UAAxB,0BAGA,oBAAID,MAAO,CAAEC,UAAW,UAAxB,2DACA,uBAAOC,QAAQ,UACf,uBAAOC,UAAU,OAAOC,SAtBV,SAACC,GACnBd,QAAQe,IAAID,EAAME,OAAOC,OACzBrB,EAASkB,EAAME,OAAOC,QAoB+BC,KAAK,OAAOC,GAAG,QAAQC,KAAK,YAAYC,YAAY,2BACrG,qBAAKT,UAAU,gCAAf,SACI,cAAC,IAAD,UACKf,EAAOyB,KAAI,SAAClB,GACT,OAAO,cAAC,IAAD,CAAuBmB,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAzD,SACH,eAAC,IAAD,CAAMC,QAAS,kBAvBjBC,EAuBoCzB,EAAM0B,YAtB5DC,UAAUC,UAAUC,UAAUJ,GAAMK,MAAK,WACrClC,QAAQe,IAAI,+CACZoB,IAAaC,KAAK,CACdC,QAAS,4CAEd,SAAUC,GACTtC,QAAQuC,MAAM,+BAAgCD,MAPjC,IAACT,GAuBmDtB,MAAOH,EAAMG,MAAOiC,UAAU,EAAO/B,MAAO,CAAEgC,MAAO,IAAKC,SAAU,OAAQhC,UAAW,SAAUiC,WAAY,QAA9J,UACI,4BAAIvC,EAAM0B,SAAW,2BAFZ1B,EAAMG,cAVvC,QC1BOqC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.912caae1.chunk.js","sourcesContent":["import { Card, Col, notification, Row } from 'antd'\r\nimport React, { useMemo, useState } from 'react'\r\nimport './Home.css'\r\nimport Data from \"../Json/Data.json\"\r\n\r\nconst Home = () => {\r\n    // const [emojis, setEmojis] = useState(Data)\r\n    const [query, setQuery] = useState('')\r\n\r\n    const emojis = useMemo(() => {\r\n        if (query === '') {\r\n            return (Data)\r\n\r\n        } else {\r\n            console.time('a')\r\n            const results = Data.filter(emoji => {\r\n                return emoji.keywords.search(query) !== -1 || emoji.title.search(query) !== -1\r\n            })\r\n            console.timeEnd('a')\r\n            return (results)\r\n        }\r\n    }, [query])\r\n    const changeHandler = (event) => {\r\n        console.log(event.target.value)\r\n        setQuery(event.target.value)\r\n    }\r\n    const clickHandler = (text) => {\r\n        navigator.clipboard.writeText(text).then(function () {\r\n            console.log('Async: Copying to clipboard was successful!');\r\n            notification.open({\r\n                message: 'Copying to clipboard was successful!',\r\n            });\r\n        }, function (err) {\r\n            console.error('Async: Could not copy text: ', err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: \"center\" }}>\r\n                Emoji Search\r\n            </h1>\r\n            <h3 style={{ textAlign: \"center\" }}>A simple emoji search tool made with ReactJS.</h3>\r\n            <label htmlFor=\"fname\"></label>\r\n            <input className=\"text\" onChange={changeHandler} type=\"text\" id=\"fname\" name=\"firstname\" placeholder=\"Search for a keyword..\"></input>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Row>\r\n                    {emojis.map((emoji) => {\r\n                        return <Col key={emoji.title} xs={24} sm={12} md={8} lg={6} xl={6}>\r\n                            <Card onClick={() => clickHandler(emoji.symbol)} title={emoji.title} bordered={false} style={{ width: 300, fontSize: \"50px\", textAlign: 'center', marginLeft: \"80px\" }}>\r\n                                <p>{emoji.symbol}</p><br></br>\r\n                            </Card>\r\n                        </Col>\r\n                    })}\r\n                </Row>\r\n            </div>,\r\n        </div>\r\n    )\r\n}\r\nexport default Home","\nimport './App.css';\nimport Home from './Home/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Home/>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}